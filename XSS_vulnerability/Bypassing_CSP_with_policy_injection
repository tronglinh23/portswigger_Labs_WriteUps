 You may encounter a website that reflects input into the actual policy, most likely in a report-uri directive. If the site reflects a parameter that you can control, you can inject a semicolon to add your own CSP directives. Usually, this report-uri directive is the final one in the list. This means you will need to overwrite existing directives in order to exploit this vulnerability and bypass the policy.

Normally, it's not possible to overwrite an existing script-src directive. However, Chrome recently introduced the script-src-elem directive, which allows you to control script elements, but not events. Crucially, this new directive allows you to overwrite existing script-src directives. Using this knowledge, you should be able to solve the following lab. 


analysis:
    after we try to submit xss => can see the result dont show anything => we can attack xss
    but we can receive anything => after see response it have CSP : 

        Content-Security-Policy: default-src 'self'; object-src 'none';script-src 'self'; style-src 'self'; report-uri /csp-report?token=
    
    xss script be blocked => script-src 'self'
    but see the last it have report-uri with para: token= => so we can use this to modify script-src
    in chorme we have script-src-elem 'unsafe-inline' : to modify srcipt-src to fire


our payload: <srcipt>alert()</script>&token=;script-src-elem 'unsafe-inline'
<script>alert(1)</script>&token=;script-src-ele
=> submit this in url: .../?search=ourpayload
=>solve the lab